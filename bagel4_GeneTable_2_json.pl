#!/usr/bin/env perl

# Anne de Jong, November 2017
# Convert a region GeneTable to json

# New version Create from one queryname.Genetables multiple JSON for each AOI_name : queryname.AOI_x

use strict ;
use warnings ;
use lib "/data/bagel4/lib" ;
use bagel4_functions ;
use lib "/data/molgentools/lib";
use anne_files ;
use anne_genomics ;
use File::Basename;


# ---------------------------------------------------------- parameters -------------------------------------------------------------------------

my $sessiondir = '/usr/bagel4/test';
my $program_dir = dirname($0) ;

my $GeneTables ;


my $usage = "option:
	-s		sessiondir [default=$sessiondir]
	-table	table input file 
	-json	json output file	
	
	input table columns:
	    AOI_name	name of the dna sequence
	    region_size
	    gene_name	name of the genes
	    gene_start
	    gene_end
	    gene_strand
	    gene_color
	    motifs
	    function
	    annotation
	    
	reads the annotaion file generated by bagel4_annotation_of_AOI.pl and convert it to a JSON file	
	
	e.g.  /usr/bagel4/bagel4_gene_table_2_json.pl -s /usr/bagel4 -table gene_table_example.txt -json /var/www/ngs/anne/d3/all_genes.json	
	e.g.  /usr/bagel4/bagel4_gene_table_2_json.pl -s /usr/bagel4/test -table NC_0085331.GeneTables -json /var/www/ngs/anne/d3/NC_0085331.all_genes.json	
" ;


&parseparam() ;

# ------------------------------------------------------------------------------------ main -------------------------------------------------------------------

my $gene_hight = 2 ;
my $gene_point = 0.4 ;
my $line_ypos = 10 ;

# 1. Get the AOIs of the query from the GeneTables
    my %tmp_hash = anne_files::read_table_to_hash("$sessiondir/$GeneTables");  # read the AOI_names from the original GeneTable
	my %all_contigs = anne_files::read_table_to_hash("$sessiondir/00.all_contigs.table");
    my @AOI_names = keys %tmp_hash ;
    my %table ;

# 2. Make for each AOI a GeneTable JSON file
    foreach my $AOI_name (sort @AOI_names) {
		print "GeneTable to JSON: $AOI_name\n";
		my $filename = get_filename($AOI_name);
		#print "============>AOIname= $AOI_name ; filename=$filename" ;
		
		%table = anne_files::Table2hash_v2("$sessiondir/$AOI_name.GeneTable", 'true');
		# data for the dna base line
		my @json = "{\n\"AOIs\": [ \n";
		my @elements ;
		my @element = '{' ;
		push @element, "\"name\": \"$AOI_name\",";
		push @element, "\"filename\": \"$filename\",";
		push @element, "\"color\": \"gray\",";
		push @element, "\"yline\": $line_ypos,";
		push @element, "\"xstart\": 5,";
		push @element, "\"points\": [ {\"x\":0,\"y\":$line_ypos}, {\"x\":800,\"y\":$line_ypos} ]", ;
		push @element, '}';
		push @elements, (join "\n", @element)."\n" ;
		push @json, (join ',', @elements) ;
		push @json, '],' ;
		
		# data and coords for the genes
		push @json,'"Genes": [';
		my @genes ;
		
		foreach my $ID (sort {$table{$a}{gene_start} <=> $table{$b}{gene_start}} keys %table) {
		# foreach my $ID (sort {$a <=> $b} keys %table) {
			$table{$ID}{motifs} = "no motifs found" if (!defined($table{$ID}{motifs})) ;
			$table{$ID}{annotation} = "unkown function" if (!defined($table{$ID}{annotation})) ;
			#print $ID."\t$table{$ID}{AOI_name}\n";
			my $gennamePos = $table{$ID}{gene_start} + abs($table{$ID}{gene_start} - $table{$ID}{gene_end})/2 ;  # genename will be placed in the center
			my $xtext = 100 * $gennamePos / $table{$ID}{region_size}  ;  # rescale to 100
			my @element = '{' ;
			push @element, "\"name\": \"$table{$ID}{gene_name}\",";
			push @element, "\"orfname\": \"$table{$ID}{orf}\",";
			push @element, "\"gene_start\": $table{$ID}{gene_start},";
			push @element, "\"gene_end\": $table{$ID}{gene_end},";
			push @element, "\"gene_strand\": \"$table{$ID}{gene_strand}\",";
			push @element, "\"real_start\": $table{$ID}{real_start},";
			push @element, "\"real_end\": $table{$ID}{real_end} ,";
			push @element, "\"real_strand\": \"$table{$ID}{real_strand}\",";
			push @element, "\"name\": \"$table{$ID}{gene_name}\",";
			push @element, "\"color\":     \"$table{$ID}{gene_color}\",";
			push @element, "\"yline\":     $line_ypos,";
			push @element, "\"angle\":     -60,";
			push @element, "\"xtext\":     $xtext,";
			push @element, "\"motifs\":    \"$table{$ID}{motifs}\",";
			push @element, "\"function\":  \"$table{$ID}{function}\",";
			push @element, "\"annotation\":\"$table{$ID}{annotation}\",";
			push @element, "\"protein\":\"$table{$ID}{protein}\",";
			push @element, "\"dna\":\"$table{$ID}{dna}\",";
			push @element, "\"points\": [".add_gene_polygon($ID)."]}" ;
			push @genes, (join "\n", @element)."\n" ;
		}
		push @json, (join ',', @genes) ;

		push @json, ']}' ;

		anne_files::write_lines("$sessiondir/$AOI_name.GeneTable.json", @json) ;
    }	



# ----------------------------------------------------------------------------- functions ----------------------------------------------------------

sub get_filename {
	my $AOI_name = shift ;
	my $result = '' ;
	if ($AOI_name =~ /(.*)\.AOI/) {
		my $queryname = $1;
		my $key = grep { $all_contigs{$_}{queryname} eq $queryname } keys %all_contigs;
		$result = $all_contigs{$key}{filename} ;
	}
	return $result ;
}

sub json_coord {
    my ($x,$y) = @_ ;
    return "{\"x\":$x,\"y\":$y}";
}

sub add_gene_polygon {
    my $ID = shift ;
    my $start = 100 * $table{$ID}{gene_start} / $table{$ID}{region_size}  ;
    my $end   = 100 * $table{$ID}{gene_end} / $table{$ID}{region_size} ;
    my @result ;
    #print "$table{$ID}{gene_name}\t$table{$ID}{gene_start}\t$table{$ID}{gene_strand} eq '+'\n";
    if ($table{$ID}{gene_strand} eq '+') {
	push @result, json_coord($start,0) ;
	push @result, json_coord($start,$gene_hight) ;
	push @result, json_coord($end-$gene_point,  $gene_hight) ;
	push @result, json_coord($end,  $gene_hight/2) ;
	push @result, json_coord($end-$gene_point,0) ;
    } else {
	push @result, json_coord($start,$gene_hight/2) ;
	push @result, json_coord($start+$gene_point,$gene_hight) ;
	push @result, json_coord($end,  $gene_hight) ;
	push @result, json_coord($end,  0) ;
	push @result, json_coord($start+$gene_point,0) ;
    }
    return join ',', @result ;
}


sub parseparam {
    my $var ;
    my @arg = @ARGV ;
    while(@arg) {
        $var = shift(@arg) ;
        die $usage if ($var eq '-h' or $var eq '--help') ;
	$sessiondir		= shift(@arg) if($var eq '-s') ;
	$GeneTables		= shift(@arg) if($var eq '-table') ;
    }
    die $usage if (!$GeneTables) ;
}


